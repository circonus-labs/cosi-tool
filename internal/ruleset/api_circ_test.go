// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package ruleset

import (
	"sync"

	circapi "github.com/circonus-labs/go-apiclient"
)

var (
	lockAPIMockCreateRuleSet      sync.RWMutex
	lockAPIMockDeleteRuleSetByCID sync.RWMutex
	lockAPIMockFetchRuleSet       sync.RWMutex
	lockAPIMockSearchRuleSets     sync.RWMutex
	lockAPIMockUpdateRuleSet      sync.RWMutex
)

// CircAPIMock is a mock implementation of API.
//
//     func TestSomethingThatUsesAPI(t *testing.T) {
//
//         // make and configure a mocked API
//         mockedAPI := &CircAPIMock{
//             CreateRuleSetFunc: func(cfg *circapi.RuleSet) (*circapi.RuleSet, error) {
// 	               panic("TODO: mock out the CreateRuleSet method")
//             },
//             DeleteRuleSetByCIDFunc: func(cid circapi.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteRuleSetByCID method")
//             },
//             FetchRuleSetFunc: func(cid circapi.CIDType) (*circapi.RuleSet, error) {
// 	               panic("TODO: mock out the FetchRuleSet method")
//             },
//             SearchRuleSetsFunc: func(searchCriteria *circapi.SearchQueryType, filterCriteria *circapi.SearchFilterType) (*[]circapi.RuleSet, error) {
// 	               panic("TODO: mock out the SearchRuleSets method")
//             },
//             UpdateRuleSetFunc: func(cfg *circapi.RuleSet) (*circapi.RuleSet, error) {
// 	               panic("TODO: mock out the UpdateRuleSet method")
//             },
//         }
//
//         // TODO: use mockedAPI in code that requires API
//         //       and then make assertions.
//
//     }
type CircAPIMock struct {
	// CreateRuleSetFunc mocks the CreateRuleSet method.
	CreateRuleSetFunc func(cfg *circapi.RuleSet) (*circapi.RuleSet, error)

	// DeleteRuleSetByCIDFunc mocks the DeleteRuleSetByCID method.
	DeleteRuleSetByCIDFunc func(cid circapi.CIDType) (bool, error)

	// FetchRuleSetFunc mocks the FetchRuleSet method.
	FetchRuleSetFunc func(cid circapi.CIDType) (*circapi.RuleSet, error)

	// SearchRuleSetsFunc mocks the SearchRuleSets method.
	SearchRuleSetsFunc func(searchCriteria *circapi.SearchQueryType, filterCriteria *circapi.SearchFilterType) (*[]circapi.RuleSet, error)

	// UpdateRuleSetFunc mocks the UpdateRuleSet method.
	UpdateRuleSetFunc func(cfg *circapi.RuleSet) (*circapi.RuleSet, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateRuleSet holds details about calls to the CreateRuleSet method.
		CreateRuleSet []struct {
			// Cfg is the cfg argument value.
			Cfg *circapi.RuleSet
		}
		// DeleteRuleSetByCID holds details about calls to the DeleteRuleSetByCID method.
		DeleteRuleSetByCID []struct {
			// Cid is the cid argument value.
			Cid circapi.CIDType
		}
		// FetchRuleSet holds details about calls to the FetchRuleSet method.
		FetchRuleSet []struct {
			// Cid is the cid argument value.
			Cid circapi.CIDType
		}
		// SearchRuleSets holds details about calls to the SearchRuleSets method.
		SearchRuleSets []struct {
			// SearchCriteria is the searchCriteria argument value.
			SearchCriteria *circapi.SearchQueryType
			// FilterCriteria is the filterCriteria argument value.
			FilterCriteria *circapi.SearchFilterType
		}
		// UpdateRuleSet holds details about calls to the UpdateRuleSet method.
		UpdateRuleSet []struct {
			// Cfg is the cfg argument value.
			Cfg *circapi.RuleSet
		}
	}
}

// CreateRuleSet calls CreateRuleSetFunc.
func (mock *CircAPIMock) CreateRuleSet(cfg *circapi.RuleSet) (*circapi.RuleSet, error) {
	if mock.CreateRuleSetFunc == nil {
		panic("moq: CircAPIMock.CreateRuleSetFunc is nil but API.CreateRuleSet was just called")
	}
	callInfo := struct {
		Cfg *circapi.RuleSet
	}{
		Cfg: cfg,
	}
	lockAPIMockCreateRuleSet.Lock()
	mock.calls.CreateRuleSet = append(mock.calls.CreateRuleSet, callInfo)
	lockAPIMockCreateRuleSet.Unlock()
	return mock.CreateRuleSetFunc(cfg)
}

// CreateRuleSetCalls gets all the calls that were made to CreateRuleSet.
// Check the length with:
//     len(mockedAPI.CreateRuleSetCalls())
func (mock *CircAPIMock) CreateRuleSetCalls() []struct {
	Cfg *circapi.RuleSet
} {
	var calls []struct {
		Cfg *circapi.RuleSet
	}
	lockAPIMockCreateRuleSet.RLock()
	calls = mock.calls.CreateRuleSet
	lockAPIMockCreateRuleSet.RUnlock()
	return calls
}

// DeleteRuleSetByCID calls DeleteRuleSetByCIDFunc.
func (mock *CircAPIMock) DeleteRuleSetByCID(cid circapi.CIDType) (bool, error) {
	if mock.DeleteRuleSetByCIDFunc == nil {
		panic("moq: CircAPIMock.DeleteRuleSetByCIDFunc is nil but API.DeleteRuleSetByCID was just called")
	}
	callInfo := struct {
		Cid circapi.CIDType
	}{
		Cid: cid,
	}
	lockAPIMockDeleteRuleSetByCID.Lock()
	mock.calls.DeleteRuleSetByCID = append(mock.calls.DeleteRuleSetByCID, callInfo)
	lockAPIMockDeleteRuleSetByCID.Unlock()
	return mock.DeleteRuleSetByCIDFunc(cid)
}

// DeleteRuleSetByCIDCalls gets all the calls that were made to DeleteRuleSetByCID.
// Check the length with:
//     len(mockedAPI.DeleteRuleSetByCIDCalls())
func (mock *CircAPIMock) DeleteRuleSetByCIDCalls() []struct {
	Cid circapi.CIDType
} {
	var calls []struct {
		Cid circapi.CIDType
	}
	lockAPIMockDeleteRuleSetByCID.RLock()
	calls = mock.calls.DeleteRuleSetByCID
	lockAPIMockDeleteRuleSetByCID.RUnlock()
	return calls
}

// FetchRuleSet calls FetchRuleSetFunc.
func (mock *CircAPIMock) FetchRuleSet(cid circapi.CIDType) (*circapi.RuleSet, error) {
	if mock.FetchRuleSetFunc == nil {
		panic("moq: CircAPIMock.FetchRuleSetFunc is nil but API.FetchRuleSet was just called")
	}
	callInfo := struct {
		Cid circapi.CIDType
	}{
		Cid: cid,
	}
	lockAPIMockFetchRuleSet.Lock()
	mock.calls.FetchRuleSet = append(mock.calls.FetchRuleSet, callInfo)
	lockAPIMockFetchRuleSet.Unlock()
	return mock.FetchRuleSetFunc(cid)
}

// FetchRuleSetCalls gets all the calls that were made to FetchRuleSet.
// Check the length with:
//     len(mockedAPI.FetchRuleSetCalls())
func (mock *CircAPIMock) FetchRuleSetCalls() []struct {
	Cid circapi.CIDType
} {
	var calls []struct {
		Cid circapi.CIDType
	}
	lockAPIMockFetchRuleSet.RLock()
	calls = mock.calls.FetchRuleSet
	lockAPIMockFetchRuleSet.RUnlock()
	return calls
}

// SearchRuleSets calls SearchRuleSetsFunc.
func (mock *CircAPIMock) SearchRuleSets(searchCriteria *circapi.SearchQueryType, filterCriteria *circapi.SearchFilterType) (*[]circapi.RuleSet, error) {
	if mock.SearchRuleSetsFunc == nil {
		panic("moq: CircAPIMock.SearchRuleSetsFunc is nil but API.SearchRuleSets was just called")
	}
	callInfo := struct {
		SearchCriteria *circapi.SearchQueryType
		FilterCriteria *circapi.SearchFilterType
	}{
		SearchCriteria: searchCriteria,
		FilterCriteria: filterCriteria,
	}
	lockAPIMockSearchRuleSets.Lock()
	mock.calls.SearchRuleSets = append(mock.calls.SearchRuleSets, callInfo)
	lockAPIMockSearchRuleSets.Unlock()
	return mock.SearchRuleSetsFunc(searchCriteria, filterCriteria)
}

// SearchRuleSetsCalls gets all the calls that were made to SearchRuleSets.
// Check the length with:
//     len(mockedAPI.SearchRuleSetsCalls())
func (mock *CircAPIMock) SearchRuleSetsCalls() []struct {
	SearchCriteria *circapi.SearchQueryType
	FilterCriteria *circapi.SearchFilterType
} {
	var calls []struct {
		SearchCriteria *circapi.SearchQueryType
		FilterCriteria *circapi.SearchFilterType
	}
	lockAPIMockSearchRuleSets.RLock()
	calls = mock.calls.SearchRuleSets
	lockAPIMockSearchRuleSets.RUnlock()
	return calls
}

// UpdateRuleSet calls UpdateRuleSetFunc.
func (mock *CircAPIMock) UpdateRuleSet(cfg *circapi.RuleSet) (*circapi.RuleSet, error) {
	if mock.UpdateRuleSetFunc == nil {
		panic("moq: CircAPIMock.UpdateRuleSetFunc is nil but API.UpdateRuleSet was just called")
	}
	callInfo := struct {
		Cfg *circapi.RuleSet
	}{
		Cfg: cfg,
	}
	lockAPIMockUpdateRuleSet.Lock()
	mock.calls.UpdateRuleSet = append(mock.calls.UpdateRuleSet, callInfo)
	lockAPIMockUpdateRuleSet.Unlock()
	return mock.UpdateRuleSetFunc(cfg)
}

// UpdateRuleSetCalls gets all the calls that were made to UpdateRuleSet.
// Check the length with:
//     len(mockedAPI.UpdateRuleSetCalls())
func (mock *CircAPIMock) UpdateRuleSetCalls() []struct {
	Cfg *circapi.RuleSet
} {
	var calls []struct {
		Cfg *circapi.RuleSet
	}
	lockAPIMockUpdateRuleSet.RLock()
	calls = mock.calls.UpdateRuleSet
	lockAPIMockUpdateRuleSet.RUnlock()
	return calls
}
