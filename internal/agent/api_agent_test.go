// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package agent

import (
	"sync"

	"github.com/circonus-labs/circonus-agent/api"
)

var (
	lockAPIMockInventory sync.RWMutex
	lockAPIMockMetrics   sync.RWMutex
)

// APIMock is a mock implementation of API.
//
//     func TestSomethingThatUsesAPI(t *testing.T) {
//
//         // make and configure a mocked API
//         mockedAPI := &APIMock{
//             InventoryFunc: func() (*api.Inventory, error) {
// 	               panic("TODO: mock out the Inventory method")
//             },
//             MetricsFunc: func(pluginID string) (*api.Metrics, error) {
// 	               panic("TODO: mock out the Metrics method")
//             },
//         }
//
//         // TODO: use mockedAPI in code that requires API
//         //       and then make assertions.
//
//     }
type APIMock struct {
	// InventoryFunc mocks the Inventory method.
	InventoryFunc func() (*api.Inventory, error)

	// MetricsFunc mocks the Metrics method.
	MetricsFunc func(pluginID string) (*api.Metrics, error)

	// calls tracks calls to the methods.
	calls struct {
		// Inventory holds details about calls to the Inventory method.
		Inventory []struct {
		}
		// Metrics holds details about calls to the Metrics method.
		Metrics []struct {
			// PluginID is the pluginID argument value.
			PluginID string
		}
	}
}

// Inventory calls InventoryFunc.
func (mock *APIMock) Inventory() (*api.Inventory, error) {
	if mock.InventoryFunc == nil {
		panic("moq: APIMock.InventoryFunc is nil but API.Inventory was just called")
	}
	callInfo := struct {
	}{}
	lockAPIMockInventory.Lock()
	mock.calls.Inventory = append(mock.calls.Inventory, callInfo)
	lockAPIMockInventory.Unlock()
	return mock.InventoryFunc()
}

// InventoryCalls gets all the calls that were made to Inventory.
// Check the length with:
//     len(mockedAPI.InventoryCalls())
func (mock *APIMock) InventoryCalls() []struct {
} {
	var calls []struct {
	}
	lockAPIMockInventory.RLock()
	calls = mock.calls.Inventory
	lockAPIMockInventory.RUnlock()
	return calls
}

// Metrics calls MetricsFunc.
func (mock *APIMock) Metrics(pluginID string) (*api.Metrics, error) {
	if mock.MetricsFunc == nil {
		panic("moq: APIMock.MetricsFunc is nil but API.Metrics was just called")
	}
	callInfo := struct {
		PluginID string
	}{
		PluginID: pluginID,
	}
	lockAPIMockMetrics.Lock()
	mock.calls.Metrics = append(mock.calls.Metrics, callInfo)
	lockAPIMockMetrics.Unlock()
	return mock.MetricsFunc(pluginID)
}

// MetricsCalls gets all the calls that were made to Metrics.
// Check the length with:
//     len(mockedAPI.MetricsCalls())
func (mock *APIMock) MetricsCalls() []struct {
	PluginID string
} {
	var calls []struct {
		PluginID string
	}
	lockAPIMockMetrics.RLock()
	calls = mock.calls.Metrics
	lockAPIMockMetrics.RUnlock()
	return calls
}
