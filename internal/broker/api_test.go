// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package broker

import (
	"github.com/circonus-labs/circonus-gometrics/api"
	"sync"
)

var (
	lockAPIMockFetchBroker  sync.RWMutex
	lockAPIMockFetchBrokers sync.RWMutex
)

// APIMock is a mock implementation of API.
//
//     func TestSomethingThatUsesAPI(t *testing.T) {
//
//         // make and configure a mocked API
//         mockedAPI := &APIMock{
//             FetchBrokerFunc: func(cid api.CIDType) (*api.Broker, error) {
// 	               panic("TODO: mock out the FetchBroker method")
//             },
//             FetchBrokersFunc: func() (*[]api.Broker, error) {
// 	               panic("TODO: mock out the FetchBrokers method")
//             },
//         }
//
//         // TODO: use mockedAPI in code that requires API
//         //       and then make assertions.
//
//     }
type APIMock struct {
	// FetchBrokerFunc mocks the FetchBroker method.
	FetchBrokerFunc func(cid api.CIDType) (*api.Broker, error)

	// FetchBrokersFunc mocks the FetchBrokers method.
	FetchBrokersFunc func() (*[]api.Broker, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchBroker holds details about calls to the FetchBroker method.
		FetchBroker []struct {
			// Cid is the cid argument value.
			Cid api.CIDType
		}
		// FetchBrokers holds details about calls to the FetchBrokers method.
		FetchBrokers []struct {
		}
	}
}

// FetchBroker calls FetchBrokerFunc.
func (mock *APIMock) FetchBroker(cid api.CIDType) (*api.Broker, error) {
	if mock.FetchBrokerFunc == nil {
		panic("moq: APIMock.FetchBrokerFunc is nil but API.FetchBroker was just called")
	}
	callInfo := struct {
		Cid api.CIDType
	}{
		Cid: cid,
	}
	lockAPIMockFetchBroker.Lock()
	mock.calls.FetchBroker = append(mock.calls.FetchBroker, callInfo)
	lockAPIMockFetchBroker.Unlock()
	return mock.FetchBrokerFunc(cid)
}

// FetchBrokerCalls gets all the calls that were made to FetchBroker.
// Check the length with:
//     len(mockedAPI.FetchBrokerCalls())
func (mock *APIMock) FetchBrokerCalls() []struct {
	Cid api.CIDType
} {
	var calls []struct {
		Cid api.CIDType
	}
	lockAPIMockFetchBroker.RLock()
	calls = mock.calls.FetchBroker
	lockAPIMockFetchBroker.RUnlock()
	return calls
}

// FetchBrokers calls FetchBrokersFunc.
func (mock *APIMock) FetchBrokers() (*[]api.Broker, error) {
	if mock.FetchBrokersFunc == nil {
		panic("moq: APIMock.FetchBrokersFunc is nil but API.FetchBrokers was just called")
	}
	callInfo := struct {
	}{}
	lockAPIMockFetchBrokers.Lock()
	mock.calls.FetchBrokers = append(mock.calls.FetchBrokers, callInfo)
	lockAPIMockFetchBrokers.Unlock()
	return mock.FetchBrokersFunc()
}

// FetchBrokersCalls gets all the calls that were made to FetchBrokers.
// Check the length with:
//     len(mockedAPI.FetchBrokersCalls())
func (mock *APIMock) FetchBrokersCalls() []struct {
} {
	var calls []struct {
	}
	lockAPIMockFetchBrokers.RLock()
	calls = mock.calls.FetchBrokers
	lockAPIMockFetchBrokers.RUnlock()
	return calls
}
