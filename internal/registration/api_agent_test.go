// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package registration

import (
	"sync"

	agentapi "github.com/circonus-labs/circonus-agent/api"
)

var (
	lockAgentAPIMockInventory sync.RWMutex
	lockAgentAPIMockMetrics   sync.RWMutex
)

// AgentAPIMock is a mock implementation of AgentAPI.
//
//     func TestSomethingThatUsesAgentAPI(t *testing.T) {
//
//         // make and configure a mocked AgentAPI
//         mockedAgentAPI := &AgentAPIMock{
//             InventoryFunc: func() (*agentapi.Inventory, error) {
// 	               panic("TODO: mock out the Inventory method")
//             },
//             MetricsFunc: func(pluginID string) (*agentapi.Metrics, error) {
// 	               panic("TODO: mock out the Metrics method")
//             },
//         }
//
//         // TODO: use mockedAgentAPI in code that requires AgentAPI
//         //       and then make assertions.
//
//     }
type AgentAPIMock struct {
	// InventoryFunc mocks the Inventory method.
	InventoryFunc func() (*agentapi.Inventory, error)

	// MetricsFunc mocks the Metrics method.
	MetricsFunc func(pluginID string) (*agentapi.Metrics, error)

	// calls tracks calls to the methods.
	calls struct {
		// Inventory holds details about calls to the Inventory method.
		Inventory []struct {
		}
		// Metrics holds details about calls to the Metrics method.
		Metrics []struct {
			// PluginID is the pluginID argument value.
			PluginID string
		}
	}
}

// Inventory calls InventoryFunc.
func (mock *AgentAPIMock) Inventory() (*agentapi.Inventory, error) {
	if mock.InventoryFunc == nil {
		panic("moq: AgentAPIMock.InventoryFunc is nil but AgentAPI.Inventory was just called")
	}
	callInfo := struct {
	}{}
	lockAgentAPIMockInventory.Lock()
	mock.calls.Inventory = append(mock.calls.Inventory, callInfo)
	lockAgentAPIMockInventory.Unlock()
	return mock.InventoryFunc()
}

// InventoryCalls gets all the calls that were made to Inventory.
// Check the length with:
//     len(mockedAgentAPI.InventoryCalls())
func (mock *AgentAPIMock) InventoryCalls() []struct {
} {
	var calls []struct {
	}
	lockAgentAPIMockInventory.RLock()
	calls = mock.calls.Inventory
	lockAgentAPIMockInventory.RUnlock()
	return calls
}

// Metrics calls MetricsFunc.
func (mock *AgentAPIMock) Metrics(pluginID string) (*agentapi.Metrics, error) {
	if mock.MetricsFunc == nil {
		panic("moq: AgentAPIMock.MetricsFunc is nil but AgentAPI.Metrics was just called")
	}
	callInfo := struct {
		PluginID string
	}{
		PluginID: pluginID,
	}
	lockAgentAPIMockMetrics.Lock()
	mock.calls.Metrics = append(mock.calls.Metrics, callInfo)
	lockAgentAPIMockMetrics.Unlock()
	return mock.MetricsFunc(pluginID)
}

// MetricsCalls gets all the calls that were made to Metrics.
// Check the length with:
//     len(mockedAgentAPI.MetricsCalls())
func (mock *AgentAPIMock) MetricsCalls() []struct {
	PluginID string
} {
	var calls []struct {
		PluginID string
	}
	lockAgentAPIMockMetrics.RLock()
	calls = mock.calls.Metrics
	lockAgentAPIMockMetrics.RUnlock()
	return calls
}
