// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package dashboards

import (
	"github.com/circonus-labs/circonus-gometrics/api"
	"sync"
)

var (
	lockCircAPIMockCreateDashboard      sync.RWMutex
	lockCircAPIMockDeleteDashboardByCID sync.RWMutex
	lockCircAPIMockFetchDashboard       sync.RWMutex
	lockCircAPIMockSearchDashboards     sync.RWMutex
	lockCircAPIMockUpdateDashboard      sync.RWMutex
)

// CircAPIMock is a mock implementation of CircAPI.
//
//     func TestSomethingThatUsesCircAPI(t *testing.T) {
//
//         // make and configure a mocked CircAPI
//         mockedCircAPI := &CircAPIMock{
//             CreateDashboardFunc: func(cfg *api.Dashboard) (*api.Dashboard, error) {
// 	               panic("TODO: mock out the CreateDashboard method")
//             },
//             DeleteDashboardByCIDFunc: func(cid api.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteDashboardByCID method")
//             },
//             FetchDashboardFunc: func(cid api.CIDType) (*api.Dashboard, error) {
// 	               panic("TODO: mock out the FetchDashboard method")
//             },
//             SearchDashboardsFunc: func(searchCriteria *api.SearchQueryType, filterCriteria *api.SearchFilterType) (*[]api.Dashboard, error) {
// 	               panic("TODO: mock out the SearchDashboards method")
//             },
//             UpdateDashboardFunc: func(cfg *api.Dashboard) (*api.Dashboard, error) {
// 	               panic("TODO: mock out the UpdateDashboard method")
//             },
//         }
//
//         // TODO: use mockedCircAPI in code that requires CircAPI
//         //       and then make assertions.
//
//     }
type CircAPIMock struct {
	// CreateDashboardFunc mocks the CreateDashboard method.
	CreateDashboardFunc func(cfg *api.Dashboard) (*api.Dashboard, error)

	// DeleteDashboardByCIDFunc mocks the DeleteDashboardByCID method.
	DeleteDashboardByCIDFunc func(cid api.CIDType) (bool, error)

	// FetchDashboardFunc mocks the FetchDashboard method.
	FetchDashboardFunc func(cid api.CIDType) (*api.Dashboard, error)

	// SearchDashboardsFunc mocks the SearchDashboards method.
	SearchDashboardsFunc func(searchCriteria *api.SearchQueryType, filterCriteria *api.SearchFilterType) (*[]api.Dashboard, error)

	// UpdateDashboardFunc mocks the UpdateDashboard method.
	UpdateDashboardFunc func(cfg *api.Dashboard) (*api.Dashboard, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateDashboard holds details about calls to the CreateDashboard method.
		CreateDashboard []struct {
			// Cfg is the cfg argument value.
			Cfg *api.Dashboard
		}
		// DeleteDashboardByCID holds details about calls to the DeleteDashboardByCID method.
		DeleteDashboardByCID []struct {
			// Cid is the cid argument value.
			Cid api.CIDType
		}
		// FetchDashboard holds details about calls to the FetchDashboard method.
		FetchDashboard []struct {
			// Cid is the cid argument value.
			Cid api.CIDType
		}
		// SearchDashboards holds details about calls to the SearchDashboards method.
		SearchDashboards []struct {
			// SearchCriteria is the searchCriteria argument value.
			SearchCriteria *api.SearchQueryType
			// FilterCriteria is the filterCriteria argument value.
			FilterCriteria *api.SearchFilterType
		}
		// UpdateDashboard holds details about calls to the UpdateDashboard method.
		UpdateDashboard []struct {
			// Cfg is the cfg argument value.
			Cfg *api.Dashboard
		}
	}
}

// CreateDashboard calls CreateDashboardFunc.
func (mock *CircAPIMock) CreateDashboard(cfg *api.Dashboard) (*api.Dashboard, error) {
	if mock.CreateDashboardFunc == nil {
		panic("moq: CircAPIMock.CreateDashboardFunc is nil but CircAPI.CreateDashboard was just called")
	}
	callInfo := struct {
		Cfg *api.Dashboard
	}{
		Cfg: cfg,
	}
	lockCircAPIMockCreateDashboard.Lock()
	mock.calls.CreateDashboard = append(mock.calls.CreateDashboard, callInfo)
	lockCircAPIMockCreateDashboard.Unlock()
	return mock.CreateDashboardFunc(cfg)
}

// CreateDashboardCalls gets all the calls that were made to CreateDashboard.
// Check the length with:
//     len(mockedCircAPI.CreateDashboardCalls())
func (mock *CircAPIMock) CreateDashboardCalls() []struct {
	Cfg *api.Dashboard
} {
	var calls []struct {
		Cfg *api.Dashboard
	}
	lockCircAPIMockCreateDashboard.RLock()
	calls = mock.calls.CreateDashboard
	lockCircAPIMockCreateDashboard.RUnlock()
	return calls
}

// DeleteDashboardByCID calls DeleteDashboardByCIDFunc.
func (mock *CircAPIMock) DeleteDashboardByCID(cid api.CIDType) (bool, error) {
	if mock.DeleteDashboardByCIDFunc == nil {
		panic("moq: CircAPIMock.DeleteDashboardByCIDFunc is nil but CircAPI.DeleteDashboardByCID was just called")
	}
	callInfo := struct {
		Cid api.CIDType
	}{
		Cid: cid,
	}
	lockCircAPIMockDeleteDashboardByCID.Lock()
	mock.calls.DeleteDashboardByCID = append(mock.calls.DeleteDashboardByCID, callInfo)
	lockCircAPIMockDeleteDashboardByCID.Unlock()
	return mock.DeleteDashboardByCIDFunc(cid)
}

// DeleteDashboardByCIDCalls gets all the calls that were made to DeleteDashboardByCID.
// Check the length with:
//     len(mockedCircAPI.DeleteDashboardByCIDCalls())
func (mock *CircAPIMock) DeleteDashboardByCIDCalls() []struct {
	Cid api.CIDType
} {
	var calls []struct {
		Cid api.CIDType
	}
	lockCircAPIMockDeleteDashboardByCID.RLock()
	calls = mock.calls.DeleteDashboardByCID
	lockCircAPIMockDeleteDashboardByCID.RUnlock()
	return calls
}

// FetchDashboard calls FetchDashboardFunc.
func (mock *CircAPIMock) FetchDashboard(cid api.CIDType) (*api.Dashboard, error) {
	if mock.FetchDashboardFunc == nil {
		panic("moq: CircAPIMock.FetchDashboardFunc is nil but CircAPI.FetchDashboard was just called")
	}
	callInfo := struct {
		Cid api.CIDType
	}{
		Cid: cid,
	}
	lockCircAPIMockFetchDashboard.Lock()
	mock.calls.FetchDashboard = append(mock.calls.FetchDashboard, callInfo)
	lockCircAPIMockFetchDashboard.Unlock()
	return mock.FetchDashboardFunc(cid)
}

// FetchDashboardCalls gets all the calls that were made to FetchDashboard.
// Check the length with:
//     len(mockedCircAPI.FetchDashboardCalls())
func (mock *CircAPIMock) FetchDashboardCalls() []struct {
	Cid api.CIDType
} {
	var calls []struct {
		Cid api.CIDType
	}
	lockCircAPIMockFetchDashboard.RLock()
	calls = mock.calls.FetchDashboard
	lockCircAPIMockFetchDashboard.RUnlock()
	return calls
}

// SearchDashboards calls SearchDashboardsFunc.
func (mock *CircAPIMock) SearchDashboards(searchCriteria *api.SearchQueryType, filterCriteria *api.SearchFilterType) (*[]api.Dashboard, error) {
	if mock.SearchDashboardsFunc == nil {
		panic("moq: CircAPIMock.SearchDashboardsFunc is nil but CircAPI.SearchDashboards was just called")
	}
	callInfo := struct {
		SearchCriteria *api.SearchQueryType
		FilterCriteria *api.SearchFilterType
	}{
		SearchCriteria: searchCriteria,
		FilterCriteria: filterCriteria,
	}
	lockCircAPIMockSearchDashboards.Lock()
	mock.calls.SearchDashboards = append(mock.calls.SearchDashboards, callInfo)
	lockCircAPIMockSearchDashboards.Unlock()
	return mock.SearchDashboardsFunc(searchCriteria, filterCriteria)
}

// SearchDashboardsCalls gets all the calls that were made to SearchDashboards.
// Check the length with:
//     len(mockedCircAPI.SearchDashboardsCalls())
func (mock *CircAPIMock) SearchDashboardsCalls() []struct {
	SearchCriteria *api.SearchQueryType
	FilterCriteria *api.SearchFilterType
} {
	var calls []struct {
		SearchCriteria *api.SearchQueryType
		FilterCriteria *api.SearchFilterType
	}
	lockCircAPIMockSearchDashboards.RLock()
	calls = mock.calls.SearchDashboards
	lockCircAPIMockSearchDashboards.RUnlock()
	return calls
}

// UpdateDashboard calls UpdateDashboardFunc.
func (mock *CircAPIMock) UpdateDashboard(cfg *api.Dashboard) (*api.Dashboard, error) {
	if mock.UpdateDashboardFunc == nil {
		panic("moq: CircAPIMock.UpdateDashboardFunc is nil but CircAPI.UpdateDashboard was just called")
	}
	callInfo := struct {
		Cfg *api.Dashboard
	}{
		Cfg: cfg,
	}
	lockCircAPIMockUpdateDashboard.Lock()
	mock.calls.UpdateDashboard = append(mock.calls.UpdateDashboard, callInfo)
	lockCircAPIMockUpdateDashboard.Unlock()
	return mock.UpdateDashboardFunc(cfg)
}

// UpdateDashboardCalls gets all the calls that were made to UpdateDashboard.
// Check the length with:
//     len(mockedCircAPI.UpdateDashboardCalls())
func (mock *CircAPIMock) UpdateDashboardCalls() []struct {
	Cfg *api.Dashboard
} {
	var calls []struct {
		Cfg *api.Dashboard
	}
	lockCircAPIMockUpdateDashboard.RLock()
	calls = mock.calls.UpdateDashboard
	lockCircAPIMockUpdateDashboard.RUnlock()
	return calls
}
