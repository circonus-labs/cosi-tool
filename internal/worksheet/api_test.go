// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package worksheet

import (
	"github.com/circonus-labs/circonus-gometrics/api"
	"sync"
)

var (
	lockAPIMockCreateWorksheet      sync.RWMutex
	lockAPIMockDeleteWorksheetByCID sync.RWMutex
	lockAPIMockFetchWorksheet       sync.RWMutex
	lockAPIMockSearchWorksheets     sync.RWMutex
	lockAPIMockUpdateWorksheet      sync.RWMutex
)

// APIMock is a mock implementation of API.
//
//     func TestSomethingThatUsesAPI(t *testing.T) {
//
//         // make and configure a mocked API
//         mockedAPI := &APIMock{
//             CreateWorksheetFunc: func(cfg *api.Worksheet) (*api.Worksheet, error) {
// 	               panic("TODO: mock out the CreateWorksheet method")
//             },
//             DeleteWorksheetByCIDFunc: func(cid api.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteWorksheetByCID method")
//             },
//             FetchWorksheetFunc: func(cid api.CIDType) (*api.Worksheet, error) {
// 	               panic("TODO: mock out the FetchWorksheet method")
//             },
//             SearchWorksheetsFunc: func(searchCriteria *api.SearchQueryType, filterCriteria *api.SearchFilterType) (*[]api.Worksheet, error) {
// 	               panic("TODO: mock out the SearchWorksheets method")
//             },
//             UpdateWorksheetFunc: func(cfg *api.Worksheet) (*api.Worksheet, error) {
// 	               panic("TODO: mock out the UpdateWorksheet method")
//             },
//         }
//
//         // TODO: use mockedAPI in code that requires API
//         //       and then make assertions.
//
//     }
type APIMock struct {
	// CreateWorksheetFunc mocks the CreateWorksheet method.
	CreateWorksheetFunc func(cfg *api.Worksheet) (*api.Worksheet, error)

	// DeleteWorksheetByCIDFunc mocks the DeleteWorksheetByCID method.
	DeleteWorksheetByCIDFunc func(cid api.CIDType) (bool, error)

	// FetchWorksheetFunc mocks the FetchWorksheet method.
	FetchWorksheetFunc func(cid api.CIDType) (*api.Worksheet, error)

	// SearchWorksheetsFunc mocks the SearchWorksheets method.
	SearchWorksheetsFunc func(searchCriteria *api.SearchQueryType, filterCriteria *api.SearchFilterType) (*[]api.Worksheet, error)

	// UpdateWorksheetFunc mocks the UpdateWorksheet method.
	UpdateWorksheetFunc func(cfg *api.Worksheet) (*api.Worksheet, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateWorksheet holds details about calls to the CreateWorksheet method.
		CreateWorksheet []struct {
			// Cfg is the cfg argument value.
			Cfg *api.Worksheet
		}
		// DeleteWorksheetByCID holds details about calls to the DeleteWorksheetByCID method.
		DeleteWorksheetByCID []struct {
			// Cid is the cid argument value.
			Cid api.CIDType
		}
		// FetchWorksheet holds details about calls to the FetchWorksheet method.
		FetchWorksheet []struct {
			// Cid is the cid argument value.
			Cid api.CIDType
		}
		// SearchWorksheets holds details about calls to the SearchWorksheets method.
		SearchWorksheets []struct {
			// SearchCriteria is the searchCriteria argument value.
			SearchCriteria *api.SearchQueryType
			// FilterCriteria is the filterCriteria argument value.
			FilterCriteria *api.SearchFilterType
		}
		// UpdateWorksheet holds details about calls to the UpdateWorksheet method.
		UpdateWorksheet []struct {
			// Cfg is the cfg argument value.
			Cfg *api.Worksheet
		}
	}
}

// CreateWorksheet calls CreateWorksheetFunc.
func (mock *APIMock) CreateWorksheet(cfg *api.Worksheet) (*api.Worksheet, error) {
	if mock.CreateWorksheetFunc == nil {
		panic("moq: APIMock.CreateWorksheetFunc is nil but API.CreateWorksheet was just called")
	}
	callInfo := struct {
		Cfg *api.Worksheet
	}{
		Cfg: cfg,
	}
	lockAPIMockCreateWorksheet.Lock()
	mock.calls.CreateWorksheet = append(mock.calls.CreateWorksheet, callInfo)
	lockAPIMockCreateWorksheet.Unlock()
	return mock.CreateWorksheetFunc(cfg)
}

// CreateWorksheetCalls gets all the calls that were made to CreateWorksheet.
// Check the length with:
//     len(mockedAPI.CreateWorksheetCalls())
func (mock *APIMock) CreateWorksheetCalls() []struct {
	Cfg *api.Worksheet
} {
	var calls []struct {
		Cfg *api.Worksheet
	}
	lockAPIMockCreateWorksheet.RLock()
	calls = mock.calls.CreateWorksheet
	lockAPIMockCreateWorksheet.RUnlock()
	return calls
}

// DeleteWorksheetByCID calls DeleteWorksheetByCIDFunc.
func (mock *APIMock) DeleteWorksheetByCID(cid api.CIDType) (bool, error) {
	if mock.DeleteWorksheetByCIDFunc == nil {
		panic("moq: APIMock.DeleteWorksheetByCIDFunc is nil but API.DeleteWorksheetByCID was just called")
	}
	callInfo := struct {
		Cid api.CIDType
	}{
		Cid: cid,
	}
	lockAPIMockDeleteWorksheetByCID.Lock()
	mock.calls.DeleteWorksheetByCID = append(mock.calls.DeleteWorksheetByCID, callInfo)
	lockAPIMockDeleteWorksheetByCID.Unlock()
	return mock.DeleteWorksheetByCIDFunc(cid)
}

// DeleteWorksheetByCIDCalls gets all the calls that were made to DeleteWorksheetByCID.
// Check the length with:
//     len(mockedAPI.DeleteWorksheetByCIDCalls())
func (mock *APIMock) DeleteWorksheetByCIDCalls() []struct {
	Cid api.CIDType
} {
	var calls []struct {
		Cid api.CIDType
	}
	lockAPIMockDeleteWorksheetByCID.RLock()
	calls = mock.calls.DeleteWorksheetByCID
	lockAPIMockDeleteWorksheetByCID.RUnlock()
	return calls
}

// FetchWorksheet calls FetchWorksheetFunc.
func (mock *APIMock) FetchWorksheet(cid api.CIDType) (*api.Worksheet, error) {
	if mock.FetchWorksheetFunc == nil {
		panic("moq: APIMock.FetchWorksheetFunc is nil but API.FetchWorksheet was just called")
	}
	callInfo := struct {
		Cid api.CIDType
	}{
		Cid: cid,
	}
	lockAPIMockFetchWorksheet.Lock()
	mock.calls.FetchWorksheet = append(mock.calls.FetchWorksheet, callInfo)
	lockAPIMockFetchWorksheet.Unlock()
	return mock.FetchWorksheetFunc(cid)
}

// FetchWorksheetCalls gets all the calls that were made to FetchWorksheet.
// Check the length with:
//     len(mockedAPI.FetchWorksheetCalls())
func (mock *APIMock) FetchWorksheetCalls() []struct {
	Cid api.CIDType
} {
	var calls []struct {
		Cid api.CIDType
	}
	lockAPIMockFetchWorksheet.RLock()
	calls = mock.calls.FetchWorksheet
	lockAPIMockFetchWorksheet.RUnlock()
	return calls
}

// SearchWorksheets calls SearchWorksheetsFunc.
func (mock *APIMock) SearchWorksheets(searchCriteria *api.SearchQueryType, filterCriteria *api.SearchFilterType) (*[]api.Worksheet, error) {
	if mock.SearchWorksheetsFunc == nil {
		panic("moq: APIMock.SearchWorksheetsFunc is nil but API.SearchWorksheets was just called")
	}
	callInfo := struct {
		SearchCriteria *api.SearchQueryType
		FilterCriteria *api.SearchFilterType
	}{
		SearchCriteria: searchCriteria,
		FilterCriteria: filterCriteria,
	}
	lockAPIMockSearchWorksheets.Lock()
	mock.calls.SearchWorksheets = append(mock.calls.SearchWorksheets, callInfo)
	lockAPIMockSearchWorksheets.Unlock()
	return mock.SearchWorksheetsFunc(searchCriteria, filterCriteria)
}

// SearchWorksheetsCalls gets all the calls that were made to SearchWorksheets.
// Check the length with:
//     len(mockedAPI.SearchWorksheetsCalls())
func (mock *APIMock) SearchWorksheetsCalls() []struct {
	SearchCriteria *api.SearchQueryType
	FilterCriteria *api.SearchFilterType
} {
	var calls []struct {
		SearchCriteria *api.SearchQueryType
		FilterCriteria *api.SearchFilterType
	}
	lockAPIMockSearchWorksheets.RLock()
	calls = mock.calls.SearchWorksheets
	lockAPIMockSearchWorksheets.RUnlock()
	return calls
}

// UpdateWorksheet calls UpdateWorksheetFunc.
func (mock *APIMock) UpdateWorksheet(cfg *api.Worksheet) (*api.Worksheet, error) {
	if mock.UpdateWorksheetFunc == nil {
		panic("moq: APIMock.UpdateWorksheetFunc is nil but API.UpdateWorksheet was just called")
	}
	callInfo := struct {
		Cfg *api.Worksheet
	}{
		Cfg: cfg,
	}
	lockAPIMockUpdateWorksheet.Lock()
	mock.calls.UpdateWorksheet = append(mock.calls.UpdateWorksheet, callInfo)
	lockAPIMockUpdateWorksheet.Unlock()
	return mock.UpdateWorksheetFunc(cfg)
}

// UpdateWorksheetCalls gets all the calls that were made to UpdateWorksheet.
// Check the length with:
//     len(mockedAPI.UpdateWorksheetCalls())
func (mock *APIMock) UpdateWorksheetCalls() []struct {
	Cfg *api.Worksheet
} {
	var calls []struct {
		Cfg *api.Worksheet
	}
	lockAPIMockUpdateWorksheet.RLock()
	calls = mock.calls.UpdateWorksheet
	lockAPIMockUpdateWorksheet.RUnlock()
	return calls
}
