// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package graph

import (
	"sync"

	circapi "github.com/circonus-labs/go-apiclient"
)

var (
	lockAPIMockCreateGraph      sync.RWMutex
	lockAPIMockDeleteGraphByCID sync.RWMutex
	lockAPIMockFetchGraph       sync.RWMutex
	lockAPIMockSearchGraphs     sync.RWMutex
	lockAPIMockUpdateGraph      sync.RWMutex
)

// APIMock is a mock implementation of API.
//
//     func TestSomethingThatUsesAPI(t *testing.T) {
//
//         // make and configure a mocked API
//         mockedAPI := &APIMock{
//             CreateGraphFunc: func(cfg *circapi.Graph) (*circapi.Graph, error) {
// 	               panic("TODO: mock out the CreateGraph method")
//             },
//             DeleteGraphByCIDFunc: func(cid circapi.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteGraphByCID method")
//             },
//             FetchGraphFunc: func(cid circapi.CIDType) (*circapi.Graph, error) {
// 	               panic("TODO: mock out the FetchGraph method")
//             },
//             SearchGraphsFunc: func(searchCriteria *circapi.SearchQueryType, filterCriteria *circapi.SearchFilterType) (*[]circapi.Graph, error) {
// 	               panic("TODO: mock out the SearchGraphs method")
//             },
//             UpdateGraphFunc: func(cfg *circapi.Graph) (*circapi.Graph, error) {
// 	               panic("TODO: mock out the UpdateGraph method")
//             },
//         }
//
//         // TODO: use mockedAPI in code that requires API
//         //       and then make assertions.
//
//     }
type APIMock struct {
	// CreateGraphFunc mocks the CreateGraph method.
	CreateGraphFunc func(cfg *circapi.Graph) (*circapi.Graph, error)

	// DeleteGraphByCIDFunc mocks the DeleteGraphByCID method.
	DeleteGraphByCIDFunc func(cid circapi.CIDType) (bool, error)

	// FetchGraphFunc mocks the FetchGraph method.
	FetchGraphFunc func(cid circapi.CIDType) (*circapi.Graph, error)

	// SearchGraphsFunc mocks the SearchGraphs method.
	SearchGraphsFunc func(searchCriteria *circapi.SearchQueryType, filterCriteria *circapi.SearchFilterType) (*[]circapi.Graph, error)

	// UpdateGraphFunc mocks the UpdateGraph method.
	UpdateGraphFunc func(cfg *circapi.Graph) (*circapi.Graph, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateGraph holds details about calls to the CreateGraph method.
		CreateGraph []struct {
			// Cfg is the cfg argument value.
			Cfg *circapi.Graph
		}
		// DeleteGraphByCID holds details about calls to the DeleteGraphByCID method.
		DeleteGraphByCID []struct {
			// Cid is the cid argument value.
			Cid circapi.CIDType
		}
		// FetchGraph holds details about calls to the FetchGraph method.
		FetchGraph []struct {
			// Cid is the cid argument value.
			Cid circapi.CIDType
		}
		// SearchGraphs holds details about calls to the SearchGraphs method.
		SearchGraphs []struct {
			// SearchCriteria is the searchCriteria argument value.
			SearchCriteria *circapi.SearchQueryType
			// FilterCriteria is the filterCriteria argument value.
			FilterCriteria *circapi.SearchFilterType
		}
		// UpdateGraph holds details about calls to the UpdateGraph method.
		UpdateGraph []struct {
			// Cfg is the cfg argument value.
			Cfg *circapi.Graph
		}
	}
}

// CreateGraph calls CreateGraphFunc.
func (mock *APIMock) CreateGraph(cfg *circapi.Graph) (*circapi.Graph, error) {
	if mock.CreateGraphFunc == nil {
		panic("moq: APIMock.CreateGraphFunc is nil but API.CreateGraph was just called")
	}
	callInfo := struct {
		Cfg *circapi.Graph
	}{
		Cfg: cfg,
	}
	lockAPIMockCreateGraph.Lock()
	mock.calls.CreateGraph = append(mock.calls.CreateGraph, callInfo)
	lockAPIMockCreateGraph.Unlock()
	return mock.CreateGraphFunc(cfg)
}

// CreateGraphCalls gets all the calls that were made to CreateGraph.
// Check the length with:
//     len(mockedAPI.CreateGraphCalls())
func (mock *APIMock) CreateGraphCalls() []struct {
	Cfg *circapi.Graph
} {
	var calls []struct {
		Cfg *circapi.Graph
	}
	lockAPIMockCreateGraph.RLock()
	calls = mock.calls.CreateGraph
	lockAPIMockCreateGraph.RUnlock()
	return calls
}

// DeleteGraphByCID calls DeleteGraphByCIDFunc.
func (mock *APIMock) DeleteGraphByCID(cid circapi.CIDType) (bool, error) {
	if mock.DeleteGraphByCIDFunc == nil {
		panic("moq: APIMock.DeleteGraphByCIDFunc is nil but API.DeleteGraphByCID was just called")
	}
	callInfo := struct {
		Cid circapi.CIDType
	}{
		Cid: cid,
	}
	lockAPIMockDeleteGraphByCID.Lock()
	mock.calls.DeleteGraphByCID = append(mock.calls.DeleteGraphByCID, callInfo)
	lockAPIMockDeleteGraphByCID.Unlock()
	return mock.DeleteGraphByCIDFunc(cid)
}

// DeleteGraphByCIDCalls gets all the calls that were made to DeleteGraphByCID.
// Check the length with:
//     len(mockedAPI.DeleteGraphByCIDCalls())
func (mock *APIMock) DeleteGraphByCIDCalls() []struct {
	Cid circapi.CIDType
} {
	var calls []struct {
		Cid circapi.CIDType
	}
	lockAPIMockDeleteGraphByCID.RLock()
	calls = mock.calls.DeleteGraphByCID
	lockAPIMockDeleteGraphByCID.RUnlock()
	return calls
}

// FetchGraph calls FetchGraphFunc.
func (mock *APIMock) FetchGraph(cid circapi.CIDType) (*circapi.Graph, error) {
	if mock.FetchGraphFunc == nil {
		panic("moq: APIMock.FetchGraphFunc is nil but API.FetchGraph was just called")
	}
	callInfo := struct {
		Cid circapi.CIDType
	}{
		Cid: cid,
	}
	lockAPIMockFetchGraph.Lock()
	mock.calls.FetchGraph = append(mock.calls.FetchGraph, callInfo)
	lockAPIMockFetchGraph.Unlock()
	return mock.FetchGraphFunc(cid)
}

// FetchGraphCalls gets all the calls that were made to FetchGraph.
// Check the length with:
//     len(mockedAPI.FetchGraphCalls())
func (mock *APIMock) FetchGraphCalls() []struct {
	Cid circapi.CIDType
} {
	var calls []struct {
		Cid circapi.CIDType
	}
	lockAPIMockFetchGraph.RLock()
	calls = mock.calls.FetchGraph
	lockAPIMockFetchGraph.RUnlock()
	return calls
}

// SearchGraphs calls SearchGraphsFunc.
func (mock *APIMock) SearchGraphs(searchCriteria *circapi.SearchQueryType, filterCriteria *circapi.SearchFilterType) (*[]circapi.Graph, error) {
	if mock.SearchGraphsFunc == nil {
		panic("moq: APIMock.SearchGraphsFunc is nil but API.SearchGraphs was just called")
	}
	callInfo := struct {
		SearchCriteria *circapi.SearchQueryType
		FilterCriteria *circapi.SearchFilterType
	}{
		SearchCriteria: searchCriteria,
		FilterCriteria: filterCriteria,
	}
	lockAPIMockSearchGraphs.Lock()
	mock.calls.SearchGraphs = append(mock.calls.SearchGraphs, callInfo)
	lockAPIMockSearchGraphs.Unlock()
	return mock.SearchGraphsFunc(searchCriteria, filterCriteria)
}

// SearchGraphsCalls gets all the calls that were made to SearchGraphs.
// Check the length with:
//     len(mockedAPI.SearchGraphsCalls())
func (mock *APIMock) SearchGraphsCalls() []struct {
	SearchCriteria *circapi.SearchQueryType
	FilterCriteria *circapi.SearchFilterType
} {
	var calls []struct {
		SearchCriteria *circapi.SearchQueryType
		FilterCriteria *circapi.SearchFilterType
	}
	lockAPIMockSearchGraphs.RLock()
	calls = mock.calls.SearchGraphs
	lockAPIMockSearchGraphs.RUnlock()
	return calls
}

// UpdateGraph calls UpdateGraphFunc.
func (mock *APIMock) UpdateGraph(cfg *circapi.Graph) (*circapi.Graph, error) {
	if mock.UpdateGraphFunc == nil {
		panic("moq: APIMock.UpdateGraphFunc is nil but API.UpdateGraph was just called")
	}
	callInfo := struct {
		Cfg *circapi.Graph
	}{
		Cfg: cfg,
	}
	lockAPIMockUpdateGraph.Lock()
	mock.calls.UpdateGraph = append(mock.calls.UpdateGraph, callInfo)
	lockAPIMockUpdateGraph.Unlock()
	return mock.UpdateGraphFunc(cfg)
}

// UpdateGraphCalls gets all the calls that were made to UpdateGraph.
// Check the length with:
//     len(mockedAPI.UpdateGraphCalls())
func (mock *APIMock) UpdateGraphCalls() []struct {
	Cfg *circapi.Graph
} {
	var calls []struct {
		Cfg *circapi.Graph
	}
	lockAPIMockUpdateGraph.RLock()
	calls = mock.calls.UpdateGraph
	lockAPIMockUpdateGraph.RUnlock()
	return calls
}
