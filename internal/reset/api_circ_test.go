// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package reset

import (
	"github.com/circonus-labs/go-apiclient"
	"sync"
)

var (
	lockCircAPIMockDeleteCheckBundleByCID sync.RWMutex
	lockCircAPIMockDeleteDashboardByCID   sync.RWMutex
	lockCircAPIMockDeleteGraphByCID       sync.RWMutex
	lockCircAPIMockDeleteRuleSetByCID     sync.RWMutex
	lockCircAPIMockDeleteWorksheetByCID   sync.RWMutex
)

// CircAPIMock is a mock implementation of CircAPI.
//
//     func TestSomethingThatUsesCircAPI(t *testing.T) {
//
//         // make and configure a mocked CircAPI
//         mockedCircAPI := &CircAPIMock{
//             DeleteCheckBundleByCIDFunc: func(cid apiclient.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteCheckBundleByCID method")
//             },
//             DeleteDashboardByCIDFunc: func(cid apiclient.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteDashboardByCID method")
//             },
//             DeleteGraphByCIDFunc: func(cid apiclient.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteGraphByCID method")
//             },
//             DeleteRuleSetByCIDFunc: func(cid apiclient.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteRuleSetByCID method")
//             },
//             DeleteWorksheetByCIDFunc: func(cid apiclient.CIDType) (bool, error) {
// 	               panic("TODO: mock out the DeleteWorksheetByCID method")
//             },
//         }
//
//         // TODO: use mockedCircAPI in code that requires CircAPI
//         //       and then make assertions.
//
//     }
type CircAPIMock struct {
	// DeleteCheckBundleByCIDFunc mocks the DeleteCheckBundleByCID method.
	DeleteCheckBundleByCIDFunc func(cid apiclient.CIDType) (bool, error)

	// DeleteDashboardByCIDFunc mocks the DeleteDashboardByCID method.
	DeleteDashboardByCIDFunc func(cid apiclient.CIDType) (bool, error)

	// DeleteGraphByCIDFunc mocks the DeleteGraphByCID method.
	DeleteGraphByCIDFunc func(cid apiclient.CIDType) (bool, error)

	// DeleteRuleSetByCIDFunc mocks the DeleteRuleSetByCID method.
	DeleteRuleSetByCIDFunc func(cid apiclient.CIDType) (bool, error)

	// DeleteWorksheetByCIDFunc mocks the DeleteWorksheetByCID method.
	DeleteWorksheetByCIDFunc func(cid apiclient.CIDType) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteCheckBundleByCID holds details about calls to the DeleteCheckBundleByCID method.
		DeleteCheckBundleByCID []struct {
			// Cid is the cid argument value.
			Cid apiclient.CIDType
		}
		// DeleteDashboardByCID holds details about calls to the DeleteDashboardByCID method.
		DeleteDashboardByCID []struct {
			// Cid is the cid argument value.
			Cid apiclient.CIDType
		}
		// DeleteGraphByCID holds details about calls to the DeleteGraphByCID method.
		DeleteGraphByCID []struct {
			// Cid is the cid argument value.
			Cid apiclient.CIDType
		}
		// DeleteRuleSetByCID holds details about calls to the DeleteRuleSetByCID method.
		DeleteRuleSetByCID []struct {
			// Cid is the cid argument value.
			Cid apiclient.CIDType
		}
		// DeleteWorksheetByCID holds details about calls to the DeleteWorksheetByCID method.
		DeleteWorksheetByCID []struct {
			// Cid is the cid argument value.
			Cid apiclient.CIDType
		}
	}
}

// DeleteCheckBundleByCID calls DeleteCheckBundleByCIDFunc.
func (mock *CircAPIMock) DeleteCheckBundleByCID(cid apiclient.CIDType) (bool, error) {
	if mock.DeleteCheckBundleByCIDFunc == nil {
		panic("CircAPIMock.DeleteCheckBundleByCIDFunc: method is nil but CircAPI.DeleteCheckBundleByCID was just called")
	}
	callInfo := struct {
		Cid apiclient.CIDType
	}{
		Cid: cid,
	}
	lockCircAPIMockDeleteCheckBundleByCID.Lock()
	mock.calls.DeleteCheckBundleByCID = append(mock.calls.DeleteCheckBundleByCID, callInfo)
	lockCircAPIMockDeleteCheckBundleByCID.Unlock()
	return mock.DeleteCheckBundleByCIDFunc(cid)
}

// DeleteCheckBundleByCIDCalls gets all the calls that were made to DeleteCheckBundleByCID.
// Check the length with:
//     len(mockedCircAPI.DeleteCheckBundleByCIDCalls())
func (mock *CircAPIMock) DeleteCheckBundleByCIDCalls() []struct {
	Cid apiclient.CIDType
} {
	var calls []struct {
		Cid apiclient.CIDType
	}
	lockCircAPIMockDeleteCheckBundleByCID.RLock()
	calls = mock.calls.DeleteCheckBundleByCID
	lockCircAPIMockDeleteCheckBundleByCID.RUnlock()
	return calls
}

// DeleteDashboardByCID calls DeleteDashboardByCIDFunc.
func (mock *CircAPIMock) DeleteDashboardByCID(cid apiclient.CIDType) (bool, error) {
	if mock.DeleteDashboardByCIDFunc == nil {
		panic("CircAPIMock.DeleteDashboardByCIDFunc: method is nil but CircAPI.DeleteDashboardByCID was just called")
	}
	callInfo := struct {
		Cid apiclient.CIDType
	}{
		Cid: cid,
	}
	lockCircAPIMockDeleteDashboardByCID.Lock()
	mock.calls.DeleteDashboardByCID = append(mock.calls.DeleteDashboardByCID, callInfo)
	lockCircAPIMockDeleteDashboardByCID.Unlock()
	return mock.DeleteDashboardByCIDFunc(cid)
}

// DeleteDashboardByCIDCalls gets all the calls that were made to DeleteDashboardByCID.
// Check the length with:
//     len(mockedCircAPI.DeleteDashboardByCIDCalls())
func (mock *CircAPIMock) DeleteDashboardByCIDCalls() []struct {
	Cid apiclient.CIDType
} {
	var calls []struct {
		Cid apiclient.CIDType
	}
	lockCircAPIMockDeleteDashboardByCID.RLock()
	calls = mock.calls.DeleteDashboardByCID
	lockCircAPIMockDeleteDashboardByCID.RUnlock()
	return calls
}

// DeleteGraphByCID calls DeleteGraphByCIDFunc.
func (mock *CircAPIMock) DeleteGraphByCID(cid apiclient.CIDType) (bool, error) {
	if mock.DeleteGraphByCIDFunc == nil {
		panic("CircAPIMock.DeleteGraphByCIDFunc: method is nil but CircAPI.DeleteGraphByCID was just called")
	}
	callInfo := struct {
		Cid apiclient.CIDType
	}{
		Cid: cid,
	}
	lockCircAPIMockDeleteGraphByCID.Lock()
	mock.calls.DeleteGraphByCID = append(mock.calls.DeleteGraphByCID, callInfo)
	lockCircAPIMockDeleteGraphByCID.Unlock()
	return mock.DeleteGraphByCIDFunc(cid)
}

// DeleteGraphByCIDCalls gets all the calls that were made to DeleteGraphByCID.
// Check the length with:
//     len(mockedCircAPI.DeleteGraphByCIDCalls())
func (mock *CircAPIMock) DeleteGraphByCIDCalls() []struct {
	Cid apiclient.CIDType
} {
	var calls []struct {
		Cid apiclient.CIDType
	}
	lockCircAPIMockDeleteGraphByCID.RLock()
	calls = mock.calls.DeleteGraphByCID
	lockCircAPIMockDeleteGraphByCID.RUnlock()
	return calls
}

// DeleteRuleSetByCID calls DeleteRuleSetByCIDFunc.
func (mock *CircAPIMock) DeleteRuleSetByCID(cid apiclient.CIDType) (bool, error) {
	if mock.DeleteRuleSetByCIDFunc == nil {
		panic("CircAPIMock.DeleteRuleSetByCIDFunc: method is nil but CircAPI.DeleteRuleSetByCID was just called")
	}
	callInfo := struct {
		Cid apiclient.CIDType
	}{
		Cid: cid,
	}
	lockCircAPIMockDeleteRuleSetByCID.Lock()
	mock.calls.DeleteRuleSetByCID = append(mock.calls.DeleteRuleSetByCID, callInfo)
	lockCircAPIMockDeleteRuleSetByCID.Unlock()
	return mock.DeleteRuleSetByCIDFunc(cid)
}

// DeleteRuleSetByCIDCalls gets all the calls that were made to DeleteRuleSetByCID.
// Check the length with:
//     len(mockedCircAPI.DeleteRuleSetByCIDCalls())
func (mock *CircAPIMock) DeleteRuleSetByCIDCalls() []struct {
	Cid apiclient.CIDType
} {
	var calls []struct {
		Cid apiclient.CIDType
	}
	lockCircAPIMockDeleteRuleSetByCID.RLock()
	calls = mock.calls.DeleteRuleSetByCID
	lockCircAPIMockDeleteRuleSetByCID.RUnlock()
	return calls
}

// DeleteWorksheetByCID calls DeleteWorksheetByCIDFunc.
func (mock *CircAPIMock) DeleteWorksheetByCID(cid apiclient.CIDType) (bool, error) {
	if mock.DeleteWorksheetByCIDFunc == nil {
		panic("CircAPIMock.DeleteWorksheetByCIDFunc: method is nil but CircAPI.DeleteWorksheetByCID was just called")
	}
	callInfo := struct {
		Cid apiclient.CIDType
	}{
		Cid: cid,
	}
	lockCircAPIMockDeleteWorksheetByCID.Lock()
	mock.calls.DeleteWorksheetByCID = append(mock.calls.DeleteWorksheetByCID, callInfo)
	lockCircAPIMockDeleteWorksheetByCID.Unlock()
	return mock.DeleteWorksheetByCIDFunc(cid)
}

// DeleteWorksheetByCIDCalls gets all the calls that were made to DeleteWorksheetByCID.
// Check the length with:
//     len(mockedCircAPI.DeleteWorksheetByCIDCalls())
func (mock *CircAPIMock) DeleteWorksheetByCIDCalls() []struct {
	Cid apiclient.CIDType
} {
	var calls []struct {
		Cid apiclient.CIDType
	}
	lockCircAPIMockDeleteWorksheetByCID.RLock()
	calls = mock.calls.DeleteWorksheetByCID
	lockCircAPIMockDeleteWorksheetByCID.RUnlock()
	return calls
}
